#include <iostream>
#include<fstream>
#include<sstream>
#include<sys/time.h>
#include<pthread.h>
#include <semaphore.h>
using namespace std;
const int n=4535;
const int N=8399;
const int size=N;
const int worker_count=8;
float E[n][N];
float R[size][N];
int lp_E[n];
float temp1[N];
int index_temp1=0;
int t;
ifstream myfile;
void read1()
{
    //读入被消元行信息
    
    ifstream myfile1("D:/Groebner/测试样例7 矩阵列数8399，非零消元子6375，被消元行4535/被消元行.txt");
    if (!myfile1.is_open())
    {
        cout << "can't open file:2.txt" << endl;
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<N;j++)
        {
            E[i][j]=0;
        }
    }
    int i=0;
    string line;
    while(getline(myfile1,line))
    {
        stringstream ss(line);
        int x,count=0;
        while(ss>>x)
        {
            if(count==0)
            {
                lp_E[i]=x;
            }
            E[i][N-x-1]=1;
            count++;
        }
        i++;
    }
    myfile1.close();
    //读入第一批消元子信息
    if (!myfile.is_open())
    {
        cout << "can't open file:1.txt" << endl;
    }
    for(int i=0;i<size;i++)
    {
        for(int j=0;j<N;j++)
            R[i][j]=-1;
    }
    string line1;
    while(getline(myfile,line1))
    {
        stringstream ss(line1);
        int x,count=0,y;
        while(ss>>x)
        {
            
            if(count==0)
            {
                y=x;
                if(N-1-y>size-1)
                {
                    index_temp1=y;
                    for(int i=0;i<N;i++)
                    {
                        temp1[i]=0;
                    }
                }
                else
                {
                    for(int i=0;i<N;i++)
                    {
                        R[(N-y-1)%size][i]=0;
                    }
                }
            }
            if(N-1-y>size-1)
            {
                temp1[N-x-1]=1;
            }
            else
            {
                R[(N-y-1)%size][N-x-1]=1;
            }
            count++;
        }
        if(N-1-y>=size-1)
        {
            break;
        }
    }
    
}
void read2( int temp)
{
    //读入消元子信息
    if (!myfile.is_open())
    {
        cout << "can't open file:1.txt" << endl;
    }
    
    for(int i=0;i<size;i++)
    {
        for(int j=0;j<N;j++)
            R[i][j]=-1;
    }
    string line1;
    if((N-1-index_temp1)>=temp*size&&(N-1-index_temp1)<(temp+1)*size)
    {
        for(int i=0;i<N;i++)
            R[(N-1-index_temp1)%size][i]=temp1[i];
    }
    if(index_temp1==0||(N-1-index_temp1)<(temp+1)*size){
        while(getline(myfile,line1))
        {
            stringstream ss(line1);
            int x,count=0,y;
            while(ss>>x)
            {
                if(count==0)
                {
                    y=x;
                    if(N-1-y>size*(temp+1)-1)
                    {
                        index_temp1=y;
                        for(int i=0;i<N;i++)
                        {
                            temp1[i]=0;
                        }
                    }
                    else
                    {
                        for(int i=0;i<N;i++)
                        {
                            R[(N-y-1)%size][i]=0;
                        }
                    }
                }
                if(N-1-y>size*(temp+1)-1)
                {
                    temp1[N-x-1]=1;
                }
                else
                {
                    R[(N-y-1)%size][N-x-1]=1;
                }
                count++;
                
            }
            if(N-1-y>=size*(temp+1)-1)
            {
                break;
            }
        }
    }
    
}
typedef struct{
    int t_id;
    int temp;
}threadParam_t;

sem_t sem_main;
sem_t sem_workerstart[worker_count-1];
sem_t sem_workerend[worker_count-1];

void *threadFunc(void *param)
{
    threadParam_t *p=(threadParam_t*)param;
    int t_id=p->t_id;
    int temp=p->temp;
    for(int i=0;i<size;i++)
    {
        if(t_id==0)
        {
            t=-1;
            for(int j=0;j<n;j++)
            {
                int temp2=-1;
                if((N-1-lp_E[j])==(temp*size+i))
                {
                    int k;
                    //判断本行消元子是否为空
                    if(R[i][0]==-1)
                    {
                        for(k=0;k<N;k++)
                        {
                            
                            R[i][k]=E[j][k];
                        }
                        lp_E[j]=-1;
                    }
                    else
                    {
                        for(k=0;k<N;k++)
                        {
                            if(E[j][k]==R[i][k])
                                E[j][k]=0;
                            else
                                E[j][k]=1;
                        }
                        for(k=0;k<N;k++)
                        {
                            if(E[j][k]==1)
                            {
                                lp_E[j]=N-1-k;
                                temp2=k;
                                break;
                            }
                            
                        }
                        if(temp2==-1)
                        {
                            lp_E[j]=-1;
                        }
                    }
                    t=j;
                    break;
                }
            }
        }
        else
        {
            sem_wait(&sem_workerstart[t_id-1]);
        }
        if(t_id==0)
        {
            for(int k=0;k<worker_count-1;k++)
            {
                sem_post(&sem_workerstart[k]);
            }
        }
        for(int j=t_id+1+t;j<n;j+=worker_count)
        {
            int temp2=-1;
            if(N-1-lp_E[j]==(temp*size+i))
            {
                int k;
                for(k=0;k<N;k++)
                {
                    if(E[j][k]==R[i][k])
                        E[j][k]=0;
                    else
                        E[j][k]=1;
                }
                for(k=0;k<N;k++)
                {
                    if(E[j][k]==1)
                    {
                        lp_E[j]=N-1-k;
                        temp2=k;
                        break;
                    }
                    
                }
                if(temp2==-1)
                {
                    lp_E[j]=-1;
                }
            }
        }
        if(t_id==0)
        {
            for(int t_id=0;t_id<worker_count-1;t_id++)
            {
                sem_wait(&sem_main);
            }
            for(int t_id=0;t_id<worker_count-1;t_id++)
            {
                sem_post(&sem_workerend[t_id]);
            }
        }
        else
        {
            sem_post(&sem_main);
            sem_wait(&sem_workerend[t_id-1]);
        }
    }
    pthread_exit(NULL);
    
}
void func(int temp)
{
    sem_init(&sem_main,0,0);
    for(int i=0;i<worker_count-1;i++)
    {
        sem_init(&sem_workerstart[i],0,0);
        sem_init(&sem_workerend[i],0,0);
    }
    pthread_t handles[worker_count];
    threadParam_t param[worker_count];
    for(int t_id=0;t_id<worker_count;t_id++)
    {
        param[t_id].t_id=t_id;
        param[t_id].temp=temp;
        pthread_create(&handles[t_id],NULL,threadFunc,(void*)&param[t_id]);
    }
    for(int t_id=0;t_id<worker_count;t_id++)
    {
        pthread_join(handles[t_id],NULL);
    }
    sem_destroy(&sem_main);
    for(int t_id=0;t_id<worker_count-1;t_id++)
    {
        sem_destroy(&sem_workerstart[t_id]);
        sem_destroy(&sem_workerend[t_id]);
    }
    
}
int main()
{
    struct  timeval   tv_begin,tv_end;
    unsigned  long serial_time;
    gettimeofday(&tv_begin,NULL);
    myfile.open("D:/Groebner/测试样例7 矩阵列数8399，非零消元子6375，被消元行4535/消元子.txt");
    read1();
    int count;
    if(N%size==0)
    {
        count=N/size;
    }
    else
    {
        count=N/size+1;
    }
    for(int k=0;k<count;k++)
    {
        func(k);
        if(k<count-1)
        {
            read2(k+1);
        }
    }
    
    gettimeofday(&tv_end,NULL);
    serial_time=1000000 * (tv_end.tv_sec-tv_begin.tv_sec)+ tv_end.tv_usec-tv_begin.tv_usec;
    cout<<"N:"<<N<<" serial_time:"<<serial_time<<endl;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<N;j++)
        {
            if(E[i][j]==1)
                cout<<N-1-j<<" ";
        }
        cout<<endl;
        break;
    }
}
